{"version":3,"sources":["view-file-spreadsheet.js"],"names":["window","app","pageOptions","repoID","filePath","err","commitID","fileType","fileName","ViewFileSpreadsheet","content","FileContent","React","Component","props","setIframeHeight","e","iframe","currentTarget","height","contentDocument","body","scrollHeight","state","isLoading","errorMsg","queryStatus","seafileAPI","queryOfficeFileConvertStatus","toLowerCase","then","res","data","setState","setTimeout","gettext","catch","error","response","this","className","id","title","src","siteRoot","encodeURIComponent","onLoad","ReactDom","render","document","getElementById"],"mappings":"0SAQyC,EAKrCA,OAAOC,IAAIC,YAFbC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SAAUC,EAAG,EAAHA,IAClBC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAGhBC,EAAmB,kHAKtB,OALsB,mCACvB,WACE,OACE,cAAC,IAAQ,CAACC,QAAS,cAACC,EAAW,KAEnC,KAAC,EALsB,CAASC,IAAMC,WAQlCF,EAAW,kDAEf,WAAYG,GAAQ,IAAD,EAKf,OALe,qBACjB,cAAMA,IAqDRC,gBAAkB,SAACC,GACjB,IAAMC,EAASD,EAAEE,cACjBD,EAAOE,OAASF,EAAOG,gBAAgBC,KAAKC,YAC9C,EAvDE,EAAKC,MAAQ,CACXC,WAAYnB,EACZoB,SAAU,IACV,CACJ,CAyEC,OAzEA,8CAED,WAAqB,IAAD,OAClB,IAAIpB,EAAJ,EAIkB,SAAdqB,IACFC,IAAWC,6BAA6BzB,EAAQG,EAAUF,EAAUG,EAASsB,eAAeC,MAAK,SAACC,GAEhG,OADsBA,EAAIC,KAAa,QAErC,IAAK,SACL,IAAK,aACH,EAAKC,SAAS,CACZT,WAAW,IAEbU,WAAWR,EAAa,KACxB,MACF,IAAK,QACH,EAAKO,SAAS,CACZT,WAAW,EACXC,SAAUU,aAAQ,iCAEpB,MACF,IAAK,OACH,EAAKF,SAAS,CACZT,WAAW,EACXC,SAAU,KAGlB,IAAGW,OAAM,SAACC,GACJA,EAAMC,SACR,EAAKL,SAAS,CACZT,WAAW,EACXC,SAAUU,aAAQ,iCAGpB,EAAKF,SAAS,CACZT,WAAW,EACXC,SAAUU,aAAQ,8BAGxB,GACF,CAEAT,EAxCA,CAyCF,GAAC,oBAOD,WAAU,IAAD,EACyBa,KAAKhB,MAA7BC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAEnB,OAAIpB,EACK,cAAC,IAAW,IAGjBmB,EACK,cAAC,IAAO,IAGbC,EACK,cAAC,IAAW,CAACA,SAAUA,IAI9B,qBAAKe,UAAU,iDAAgD,SAC7D,wBAAQC,GAAG,wBAAwBC,MAAOlC,EAAUmC,IAAG,UAAKC,KAAQ,iCAAyBzC,EAAM,YAAIG,GAAQ,OAAGuC,mBAAmBzC,GAAS,eAAe0C,OAAQP,KAAKxB,mBAGhL,KAAC,EAjFc,CAASH,IAAMC,WAoFhCkC,IAASC,OAAO,cAACvC,EAAmB,IAAKwC,SAASC,eAAe,W","file":"static/js/viewFileSpreadsheet.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport { seafileAPI } from './utils/seafile-api';\nimport { siteRoot, gettext } from './utils/constants';\nimport FileView from './components/file-view/file-view';\nimport FileViewTip from './components/file-view/file-view-tip';\nimport Loading from './components/loading';\n\nimport './css/spreadsheet-file-view.css';\n\nconst {\n  repoID, filePath, err,\n  commitID, fileType, fileName\n} = window.app.pageOptions;\n\nclass ViewFileSpreadsheet extends React.Component {\n  render() {\n    return (\n      <FileView content={<FileContent />} />\n    );\n  }\n}\n\nclass FileContent extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: !err,\n      errorMsg: ''\n    };\n  }\n\n  componentDidMount() {\n    if (err) {\n      return;\n    }\n\n    let queryStatus = () => {\n      seafileAPI.queryOfficeFileConvertStatus(repoID, commitID, filePath, fileType.toLowerCase()).then((res) => {\n        const convertStatus = res.data['status'];\n        switch (convertStatus) {\n          case 'QUEUED':\n          case 'PROCESSING':\n            this.setState({\n              isLoading: true\n            });\n            setTimeout(queryStatus, 2000);\n            break;\n          case 'ERROR':\n            this.setState({\n              isLoading: false,\n              errorMsg: gettext('Document convertion failed.')\n            });\n            break;\n          case 'DONE':\n            this.setState({\n              isLoading: false,\n              errorMsg: ''\n            });\n        }\n      }).catch((error) => {\n        if (error.response) {\n          this.setState({\n            isLoading: false,\n            errorMsg: gettext('Document convertion failed.')\n          });\n        } else {\n          this.setState({\n            isLoading: false,\n            errorMsg: gettext('Please check the network.')\n          });\n        }\n      });\n    };\n\n    queryStatus();\n  }\n\n  setIframeHeight = (e) => {\n    const iframe = e.currentTarget;\n    iframe.height = iframe.contentDocument.body.scrollHeight;\n  }\n\n  render() {\n    const { isLoading, errorMsg } = this.state;\n\n    if (err) {\n      return <FileViewTip />;\n    }\n\n    if (isLoading) {\n      return <Loading />;\n    }\n\n    if (errorMsg) {\n      return <FileViewTip errorMsg={errorMsg} />;\n    }\n\n    return (\n      <div className=\"file-view-content flex-1 spreadsheet-file-view\">\n        <iframe id=\"spreadsheet-container\" title={fileName} src={`${siteRoot}office-convert/static/${repoID}/${commitID}${encodeURIComponent(filePath)}/index.html`} onLoad={this.setIframeHeight}></iframe>\n      </div>\n    );\n  }\n}\n\nReactDom.render(<ViewFileSpreadsheet />, document.getElementById('wrapper'));\n"],"sourceRoot":""}