{"version":3,"sources":["pages/upload-link/upload-list-item.js","pages/upload-link/forbid-upload-list-item.js","pages/upload-link/upload-progress-dialog.js","pages/upload-link/file-uploader.js","pages/upload-link/index.js"],"names":["UPLOAD_UPLOADING","UPLOAD_ERROR","UPLOAD_ISSAVING","UPLOAD_UPLOADED","UploadListItem","props","onUploadCancel","e","preventDefault","resumableFile","onUploadRetry","formatFileSize","size","toFixed","state","uploadState","nextProps","error","remainingTime","isSaved","this","setState","progress","Math","round","className","newFileName","isUploading","role","style","width","gettext","Utils","formatTime","dangerouslySetInnerHTML","__html","href","onClick","React","Component","ForbidUploadListItem","file","msg","replace","bytesToSize","maxUploadFileSize","name","colSpan","UploadProgressDialog","toggleDropdown","dropdownOpen","onDropdownToggleKeyDown","key","onMenuItemKeyDown","target","click","allFilesUploaded","ButtonDropdown","isOpen","toggle","DropdownToggle","color","caret","onKeyDown","DropdownMenu","DropdownItem","onFileUpload","onFolderUpload","Button","outline","onCancelAllUploading","disabled","forbidUploadFileList","map","index","uploadFileList","reverse","FileUploader","componentWillUnmount","window","onbeforeunload","dragAndDrop","resumable","disableDropOnDocument","uploader","isUploadProgressDialogShow","totalProgress","bindCallbackHandler","minFileSizeErrorCallback","fileTypeErrorCallback","maxFilesErrorCallback","opts","maxFileSizeErrorCallback","bindEventHandler","on","onChunkingComplete","bind","onFileAdded","onFileProgress","onFileUploadSuccess","onFileError","onUploadStart","onProgress","onComplete","onError","onDragStart","files","errorCount","maxFiles","maxNumberOfFilesForFileupload","message","toaster","danger","push","path","fileName","relativePath","isFile","formData","parent_dir","relative_path","slice","lastIndexOf","length","setUploadFileList","seafileAPI","sharedUploadLinkGetFileUploadUrl","token","then","res","data","upload_link","resumableUpload","catch","errMessage","getErrorMsg","isUploadLinkLoaded","upload","repoID","getFileUploadedBytes","uploadedBytes","blockSize","parseInt","resumableUploadFileBlockSize","offset","floor","markChunksCompleted","filesAddedComplete","registerGlobalVariable","uploadBitrate","getBitrate","item","uniqueIdentifier","lastSize","time","loaded","now","Date","getTime","forEach","timestamp","timeDiff","bitrateInterval","notify","currentTime","JSON","parse","dir_name","indexOf","dirent","id","type","mtime","notifiedFolders","some","errorMessage","retryFileList","success","setHeaders","chunkSize","getOpt","fileSize","startByte","endByte","min","encodeURI","setQuery","generateUniqueIdentifier","webkitRelativePath","MD5","nativeEvent","stopImmediatePropagation","stopPropagation","uploadInput","current","removeAttribute","setAttribute","onCloseUploadDialog","uploadingItem","filter","cancel","retryUploadFile","bootstrap","firedRetry","resumableObj","replaceRepetitionFile","getUpdateLink","cancelFileUpload","pop","currentResumableFile","createRef","Resumablejs","query","fileType","filetypes","undefined","maxFileSize","testMethod","testChunks","headers","withCredentials","simultaneousUploads","fileParameterName","forceChunkSize","maxChunkRetries","minFileSize","assignBrowse","assignDrop","document","getElementById","ref","loggedUser","app","pageOptions","username","uploadLink","dirName","sharedBy","noQuota","SharedUploadLink","direntObject","shareLinksUploadDone","joinPath","HTMLescape","avatar","ReactDom","render"],"mappings":"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","file":"static/js/uploadLink.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { gettext } from '../../utils/constants';\nimport { Utils } from '../../utils/utils';\n\nconst propTypes = {\n  resumableFile: PropTypes.object.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n};\n\nconst UPLOAD_UPLOADING = 'uploading';\nconst UPLOAD_ERROR = 'error';\nconst UPLOAD_ISSAVING = 'isSaving';\nconst UPLOAD_UPLOADED = 'uploaded';\n\nclass UploadListItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadState: UPLOAD_UPLOADING\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { resumableFile } = nextProps;\n    let uploadState = UPLOAD_UPLOADING;\n\n    if (resumableFile.error) {\n      uploadState = UPLOAD_ERROR;\n    } else {\n      if (resumableFile.remainingTime === 0 && !resumableFile.isSaved) {\n        uploadState = UPLOAD_ISSAVING;\n      }\n\n      if (resumableFile.isSaved) {\n        uploadState = UPLOAD_UPLOADED;\n      }\n    }\n\n    this.setState({uploadState: uploadState});\n  }\n\n  onUploadCancel = (e) => {\n    e.preventDefault();\n    this.props.onUploadCancel(this.props.resumableFile);\n  }\n\n  onUploadRetry = (e) => {\n    e.preventDefault();\n    this.props.onUploadRetry(this.props.resumableFile);\n  }\n\n  formatFileSize = (size) => {\n    if (typeof size !== 'number') {\n      return '';\n    }\n    if (size >= 1000 * 1000 * 1000) {\n      return (size / (1000 * 1000 * 1000)).toFixed(1) + ' G';\n    }\n    if (size >= 1000 * 1000) {\n      return (size / (1000 * 1000)).toFixed(1) + ' M';\n    }\n    if (size >= 1000) {\n      return (size / 1000).toFixed(1) + ' K';\n    }\n    return size.toFixed(1) + ' B';\n  }\n\n  render() {\n    let { resumableFile } = this.props;\n    let progress = Math.round(resumableFile.progress() * 100);\n    let error = resumableFile.error;\n\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{resumableFile.newFileName}</div>\n        </td>\n        <td>\n          <span className=\"file-size\">{this.formatFileSize(resumableFile.size)}</span>\n        </td>\n        <td className=\"upload-progress\">\n          {(this.state.uploadState === UPLOAD_UPLOADING || this.state.uploadState === UPLOAD_ISSAVING) &&\n            <Fragment>\n              {resumableFile.size >= (100 * 1000 * 1000) &&\n                <Fragment>\n                  {resumableFile.isUploading() && (\n                    <div className=\"progress-container\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      {(resumableFile.remainingTime === -1) && <div className=\"progress-text\">{gettext('Preparing to upload...')}</div>}\n                      {(resumableFile.remainingTime > 0) && <div className=\"progress-text\">{gettext('Remaining')}{' '}{Utils.formatTime(resumableFile.remainingTime)}</div>}\n                      {(resumableFile.remainingTime === 0) && <div className=\"progress-text\">{gettext('Indexing...')}</div>}\n                    </div>\n                  )}\n                  {!resumableFile.isUploading() && (\n                    <div className=\"progress-container d-flex align-items-center\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              }\n              {(resumableFile.size < (100 * 1000 * 1000)) &&\n                <div className=\"progress-container d-flex align-items-center\">\n                  <div className=\"progress\">\n                    <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                  </div>\n                </div>\n              }\n            </Fragment>\n          }\n          {this.state.uploadState === UPLOAD_ERROR && (\n            <div className=\"message err-message ml-0\" dangerouslySetInnerHTML={{__html: error}}></div>\n          )}\n        </td>\n        <td className=\"upload-operation\">\n          <Fragment>\n            {this.state.uploadState === UPLOAD_UPLOADING && (\n              <a href=\"#\" onClick={this.onUploadCancel} role=\"button\">{gettext('Cancel')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ERROR && (\n              <a href=\"#\" onClick={this.onUploadRetry} role=\"button\">{gettext('Retry')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ISSAVING && (\n              <span className=\"saving\">{gettext('Saving...')}</span>\n            )}\n            {this.state.uploadState === UPLOAD_UPLOADED && (\n              <span className=\"uploaded\">{gettext('Uploaded')}</span>\n            )}\n          </Fragment>\n        </td>\n      </tr>\n    );\n  }\n}\n\nUploadListItem.propTypes = propTypes;\n\nexport default UploadListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Utils } from '../../utils/utils';\nimport { gettext, maxUploadFileSize } from '../../utils/constants';\n\nconst propTypes = {\n  file: PropTypes.object,\n};\n\nclass ForbidUploadListItem extends React.Component {\n\n  render() {\n    let { file } = this.props;\n    let msg = gettext('Please upload files less than {placeholder}').replace('{placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000));\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{file.name}</div>\n        </td>\n\n        <td colSpan={3} className=\"error\">{msg}</td>\n      </tr>\n    );\n  }\n}\n\nForbidUploadListItem.propTypes = propTypes;\n\nexport default ForbidUploadListItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { gettext } from '../../utils/constants';\nimport UploadListItem from './upload-list-item';\nimport ForbidUploadListItem from './forbid-upload-list-item';\n\nconst propTypes = {\n  uploadFileList: PropTypes.array.isRequired,\n  forbidUploadFileList: PropTypes.array.isRequired,\n  onCancelAllUploading: PropTypes.func.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n  onFileUpload: PropTypes.func.isRequired,\n  onFolderUpload: PropTypes.func.isRequired,\n  allFilesUploaded: PropTypes.bool.isRequired\n};\n\nclass UploadProgressDialog extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropdown = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  onDropdownToggleKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      this.toggleDropdown();\n    }\n  }\n\n  onMenuItemKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      e.target.click();\n    }\n  }\n\n  render() {\n    let { allFilesUploaded } = this.props;\n    return (\n      <Fragment>\n        <div className=\"text-center\">\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\n            <DropdownToggle color=\"primary\" caret onKeyDown={this.onDropdownToggleKeyDown}>{gettext('Upload')}</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.props.onFileUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Files')}</DropdownItem>\n              <DropdownItem onClick={this.props.onFolderUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Folder')}</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n          <Button color=\"primary\" outline={true} className=\"ml-4\"\n            onClick={this.props.onCancelAllUploading}\n            disabled={allFilesUploaded}>\n            {gettext('Cancel All')}\n          </Button>\n        </div>\n        <div className=\"mt-4 mh-2\">\n          <table className=\"table-thead-hidden\">\n            <thead>\n              <tr>\n                <th width=\"35%\">{gettext('name')}</th>\n                <th width=\"15%\">{gettext('size')}</th>\n                <th width=\"35%\">{gettext('progress')}</th>\n                <th width=\"15%\">{gettext('state')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.forbidUploadFileList.map((file, index) => {\n                return (<ForbidUploadListItem key={index} file={file} />);\n              })}\n              {this.props.uploadFileList.map((resumableFile, index) => {\n                return (\n                  <UploadListItem\n                    key={index}\n                    resumableFile={resumableFile}\n                    onUploadCancel={this.props.onUploadCancel}\n                    onUploadRetry={this.props.onUploadRetry}\n                  />\n                );\n              }).reverse()\n              }\n            </tbody>\n          </table>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nUploadProgressDialog.propTypes = propTypes;\n\nexport default UploadProgressDialog;\n","// This file is copied from frontend/src/components/file-uploader/file-uploader.js,\n// and modified according to the requirements of this page.\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Resumablejs from '@seafile/resumablejs';\nimport MD5 from 'MD5';\nimport { resumableUploadFileBlockSize, maxUploadFileSize, maxNumberOfFilesForFileupload } from '../../utils/constants';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { Utils } from '../../utils/utils';\nimport { gettext } from '../../utils/constants';\nimport UploadProgressDialog from './upload-progress-dialog';\nimport toaster from '../../components/toast';\n\nimport '../../css/file-uploader.css';\n\nconst propTypes = {\n  dragAndDrop: PropTypes.bool.isRequired,\n  token: PropTypes.string.isRequired,\n  repoID: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n\n  filetypes: PropTypes.array,\n  chunkSize: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  testMethod: PropTypes.string,\n  testChunks: PropTypes.number,\n  simultaneousUploads: PropTypes.number,\n  fileParameterName: PropTypes.string,\n  minFileSizeErrorCallback: PropTypes.func,\n  fileTypeErrorCallback: PropTypes.func,\n  onFileUploadSuccess: PropTypes.func.isRequired,\n};\n\nclass FileUploader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      retryFileList: [],\n      uploadFileList: [],\n      forbidUploadFileList: [],\n      totalProgress: 0,\n      isUploadProgressDialogShow: false,\n      currentResumableFile: null,\n      uploadBitrate: 0,\n      allFilesUploaded: false,\n    };\n\n    this.uploadInput = React.createRef();\n\n    this.notifiedFolders = [];\n\n    this.timestamp = null;\n    this.loaded = 0;\n    this.bitrateInterval = 500; // Interval in milliseconds to calculate the bitrate\n    this.isUploadLinkLoaded = false;\n\n    window.onbeforeunload = this.onbeforeunload;\n  }\n\n  componentDidMount() {\n    this.resumable = new Resumablejs({\n      target: '',\n      query: this.setQuery || {},\n      fileType: this.props.filetypes,\n      maxFiles: maxNumberOfFilesForFileupload || undefined,\n      maxFileSize: maxUploadFileSize * 1000 * 1000 || undefined,\n      testMethod: this.props.testMethod || 'post',\n      testChunks: this.props.testChunks || false,\n      headers: this.setHeaders || {},\n      withCredentials: this.props.withCredentials || false,\n      chunkSize: parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1 * 1024 * 1024,\n      simultaneousUploads: this.props.simultaneousUploads || 1,\n      fileParameterName: this.props.fileParameterName,\n      generateUniqueIdentifier: this.generateUniqueIdentifier,\n      forceChunkSize: true,\n      maxChunkRetries: 3,\n      minFileSize: 0,\n    });\n\n    this.resumable.assignBrowse(this.uploadInput.current, true);\n    if (this.props.dragAndDrop) {\n      this.resumable.assignDrop(document.getElementById('upload-link-drop-zone'));\n    }\n\n    this.bindCallbackHandler();\n    this.bindEventHandler();\n  }\n\n  componentWillUnmount = () => {\n    window.onbeforeunload = null;\n    if (this.props.dragAndDrop === true) {\n      this.resumable.disableDropOnDocument();\n    }\n  }\n\n  onbeforeunload = () => {\n    if (window.uploader &&\n        window.uploader.isUploadProgressDialogShow &&\n        window.uploader.totalProgress !== 100) {\n      return '';\n    }\n  }\n\n  bindCallbackHandler = () => {\n    let { minFileSizeErrorCallback, fileTypeErrorCallback } = this.props;\n\n    if (this.maxFilesErrorCallback) {\n      this.resumable.opts.maxFilesErrorCallback = this.maxFilesErrorCallback;\n    }\n\n    if (minFileSizeErrorCallback) {\n      this.resumable.opts.minFileSizeErrorCallback = this.props.minFileSizeErrorCallback;\n    }\n\n    if (this.maxFileSizeErrorCallback) {\n      this.resumable.opts.maxFileSizeErrorCallback = this.maxFileSizeErrorCallback;\n    }\n\n    if (fileTypeErrorCallback) {\n      this.resumable.opts.fileTypeErrorCallback = this.props.fileTypeErrorCallback;\n    }\n\n  }\n\n  bindEventHandler = () => {\n    this.resumable.on('chunkingComplete', this.onChunkingComplete.bind(this));\n    this.resumable.on('fileAdded', this.onFileAdded.bind(this));\n    this.resumable.on('fileProgress', this.onFileProgress.bind(this));\n    this.resumable.on('fileSuccess', this.onFileUploadSuccess.bind(this));\n    this.resumable.on('fileError', this.onFileError.bind(this));\n    this.resumable.on('uploadStart', this.onUploadStart.bind(this));\n    this.resumable.on('progress', this.onProgress.bind(this));\n    this.resumable.on('complete', this.onComplete.bind(this));\n    this.resumable.on('error', this.onError.bind(this));\n    this.resumable.on('dragstart', this.onDragStart.bind(this));\n  }\n\n  maxFilesErrorCallback = (files, errorCount) => {\n    let maxFiles = maxNumberOfFilesForFileupload;\n    let message = gettext('Please upload no more than {maxFiles} files at a time.');\n    message = message.replace('{maxFiles}', maxFiles);\n    toaster.danger(message);\n  }\n\n  maxFileSizeErrorCallback = (file) => {\n    let { forbidUploadFileList } = this.state;\n    forbidUploadFileList.push(file);\n    this.setState({forbidUploadFileList: forbidUploadFileList});\n  }\n\n  onChunkingComplete = (resumableFile) => {\n\n    let allFilesUploaded = this.state.allFilesUploaded;\n    if (allFilesUploaded === true) {\n      this.setState({allFilesUploaded: false});\n    }\n\n    let path = this.props.path;\n    let fileName = resumableFile.fileName;\n    let relativePath = resumableFile.relativePath;\n    let isFile = fileName === relativePath;\n\n    resumableFile.formData = {};\n    if (isFile) { // upload file\n      resumableFile.formData  = {\n        parent_dir: path,\n      };\n    } else { // upload folder\n      let relative_path = relativePath.slice(0, relativePath.lastIndexOf('/') + 1);\n      resumableFile.formData  = {\n        parent_dir: path,\n        relative_path: relative_path\n      };\n    }\n  }\n\n  onFileAdded = (resumableFile, files) => {\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (isFile && files.length === 1) {\n      let hasRepetition = false;\n      /*\n      let direntList = this.props.direntList;\n      for (let i = 0; i < direntList.length; i++) {\n        if (direntList[i].type === 'file' && direntList[i].name === resumableFile.fileName) {\n          hasRepetition = true;\n          break;\n        }\n      }\n      */\n      if (hasRepetition) {\n        this.setState({\n          isUploadRemindDialogShow: true,\n          currentResumableFile: resumableFile,\n        });\n      } else {\n        this.setUploadFileList(this.resumable.files);\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumableUpload(resumableFile);\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    } else {\n      this.setUploadFileList(this.resumable.files);\n      if (!this.isUploadLinkLoaded) {\n        this.isUploadLinkLoaded = true;\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumable.upload();\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    }\n  }\n\n  resumableUpload = (resumableFile) => {\n    let { repoID, path } = this.props;\n    seafileAPI.getFileUploadedBytes(repoID, path, resumableFile.fileName).then(res => {\n      let uploadedBytes = res.data.uploadedBytes;\n      let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n      let offset = Math.floor(uploadedBytes / blockSize);\n      resumableFile.markChunksCompleted(offset);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  filesAddedComplete = (resumable, files) => {\n    let { forbidUploadFileList } = this.state;\n    if (forbidUploadFileList.length > 0 && files.length === 0) {\n      this.setState({\n        isUploadProgressDialogShow: true,\n        totalProgress: 100\n      });\n    }\n  }\n\n  setUploadFileList = () => {\n    let uploadFileList = this.resumable.files;\n    this.setState({\n      uploadFileList: uploadFileList,\n      isUploadProgressDialogShow: true,\n    });\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', true);\n  }\n\n  onFileProgress = (resumableFile) => {\n    let uploadBitrate = this.getBitrate();\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        if (uploadBitrate) {\n          let lastSize = (item.size - (item.size * item.progress())) * 8;\n          let time = Math.floor(lastSize / uploadBitrate);\n          item.remainingTime = time;\n        }\n      }\n      return item;\n    });\n\n    this.setState({\n      uploadBitrate: uploadBitrate,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  getBitrate = () => {\n    let loaded = 0;\n    let uploadBitrate = 0;\n    let now = new Date().getTime();\n\n    this.resumable.files.forEach(file => {\n      loaded += file.progress() * file.size;\n    });\n\n    if (this.timestamp) {\n      let timeDiff = (now - this.timestamp);\n      if (timeDiff < this.bitrateInterval) {\n        return this.state.uploadBitrate;\n      }\n\n      // 1. Cancel will produce loaded greater than this.loaded\n      // 2. reset can make this.loaded to be 0\n      if (loaded < this.loaded || this.loaded === 0) {\n        this.loaded = loaded; //\n      }\n\n      uploadBitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n    }\n\n    this.timestamp = now;\n    this.loaded = loaded;\n\n    return uploadBitrate;\n  }\n\n  // start uploading\n  onUploadStart = () => {\n    const message = gettext('File upload started');\n    toaster.notify(message);\n  }\n\n  onProgress = () => {\n    let progress = Math.round(this.resumable.progress() * 100);\n    this.setState({totalProgress: progress});\n    Utils.registerGlobalVariable('uploader', 'totalProgress', progress);\n  }\n\n  onFileUploadSuccess = (resumableFile, message) => {\n    let formData = resumableFile.formData;\n    let currentTime = new Date().getTime()/1000;\n    message = formData.replace ? message : JSON.parse(message)[0];\n    if (formData.relative_path) { // upload folder\n      let relative_path = formData.relative_path;\n      let dir_name = relative_path.slice(0, relative_path.indexOf('/'));\n      let dirent = {\n        id: message.id,\n        name: dir_name,\n        type: 'dir',\n        mtime: currentTime,\n      };\n\n      // update folders cache\n      let isExist = this.notifiedFolders.some(item => {return item.name === dirent.name;});\n      if (!isExist) {\n        this.notifiedFolders.push(dirent);\n        this.props.onFileUploadSuccess(dirent);\n      }\n\n      // update uploadFileList\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = relative_path + message.name;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    if (formData.replace) { // upload file -- replace exist file\n      let fileName = resumableFile.fileName;\n      let dirent = {\n        id: message,\n        name: fileName,\n        type: 'file',\n        mtime: currentTime\n      };\n      this.props.onFileUploadSuccess(dirent); // this contance: just one file\n\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = fileName;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    // upload file -- add files\n    let dirent = {\n      id: message.id,\n      type: 'file',\n      name: message.name,\n      size: message.size,\n      mtime: currentTime,\n    };\n    this.props.onFileUploadSuccess(dirent);\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        item.newFileName = message.name;\n        item.isSaved = true;\n      }\n      return item;\n    });\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onFileError = (resumableFile, message) => {\n    let error = '';\n    if (!message) {\n      error = gettext('Network error');\n    } else {\n      // eg: '{\"error\": \"Internal error\" \\n }'\n      let errorMessage = message.replace(/\\n/g, '');\n      errorMessage  = JSON.parse(errorMessage);\n      error = errorMessage.error;\n      if (error === 'File locked by others.') {\n        error = gettext('File is locked by others.');\n      }\n      if (error === 'Internal error.') {\n        error = gettext('Internal Server Error');\n      }\n    }\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        this.state.retryFileList.push(item);\n        item.error = error;\n      }\n      return item;\n    });\n\n    this.loaded = 0;  // reset loaded data;\n    this.setState({\n      retryFileList: this.state.retryFileList,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  onComplete = () => {\n    if (!this.error) {\n      const message = gettext('All files uploaded');\n      toaster.success(message);\n    }\n    this.error = false; // reset it\n\n    this.notifiedFolders = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({allFilesUploaded: true});\n  }\n\n  onError = (message, file) => {\n    let msg = gettext('Error');\n    if (file && file.fileName) {\n      msg = gettext('Failed to upload {file_name}.')\n        .replace('{file_name}', file.fileName);\n    }\n    toaster.danger(msg, {'id': 'file-error-msg'});\n    this.error = true;\n\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    // After the error, the user can switch windows\n    Utils.registerGlobalVariable('uploader', 'totalProgress', 100);\n  }\n\n  setHeaders = (resumableFile, resumable) => {\n    let offset = resumable.offset;\n    let chunkSize = resumable.getOpt('chunkSize');\n    let fileSize = resumableFile.size === 0 ? 1 : resumableFile.size;\n    let startByte = offset !== 0 ? offset * chunkSize : 0;\n    let endByte = Math.min(fileSize, (offset + 1) * chunkSize) - 1;\n\n    if (fileSize - resumable.endByte < chunkSize && !resumable.getOpt('forceChunkSize')) {\n      endByte = fileSize;\n    }\n\n    let headers = {\n      'Accept': 'application/json; text/javascript, */*; q=0.01',\n      'Content-Disposition': 'attachment; filename=\"' + encodeURI(resumableFile.fileName) + '\"',\n      'Content-Range': 'bytes ' + startByte + '-' + endByte + '/' + fileSize,\n    };\n\n    return headers;\n  }\n\n  setQuery = (resumableFile) => {\n    let formData = resumableFile.formData;\n    return formData;\n  }\n\n  generateUniqueIdentifier = (file) => {\n    let relativePath = file.webkitRelativePath||file.relativePath||file.fileName||file.name;\n    return MD5(relativePath + new Date()) + relativePath;\n  }\n\n  onClick = (e) => {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  }\n\n  onFileUpload = () => {\n    this.uploadInput.current.removeAttribute('webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onFolderUpload = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onDragStart = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n  }\n\n  onCloseUploadDialog = () => {\n    this.loaded = 0;\n    this.resumable.files = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({isUploadProgressDialogShow: false, uploadFileList: [], forbidUploadFileList: []});\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', false);\n  }\n\n  onUploadCancel = (uploadingItem) => {\n\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (item.uniqueIdentifier === uploadingItem.uniqueIdentifier) {\n        item.cancel(); // execute cancel function will delete the file at the same time\n        return false;\n      }\n      return true;\n    });\n\n    if (!this.resumable.isUploading()) {\n      this.setState({\n        totalProgress: '100',\n        allFilesUploaded: true,\n      });\n      this.loaded = 0;\n    }\n\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onCancelAllUploading = () => {\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (Math.round(item.progress() !== 1)) {\n        item.cancel();\n        return false;\n      }\n      return true;\n    });\n\n    this.loaded = 0;\n\n    this.setState({\n      allFilesUploaded: true,\n      totalProgress: '100',\n      uploadFileList: uploadFileList\n    });\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n  }\n\n  onUploadRetry = (resumableFile) => {\n    seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n      this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n      let retryFileList = this.state.retryFileList.filter(item => {\n        return item.uniqueIdentifier !== resumableFile.uniqueIdentifier;\n      });\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.error = null;\n          this.retryUploadFile(item);\n        }\n        return item;\n      });\n\n      this.setState({\n        retryFileList: retryFileList,\n        uploadFileList: uploadFileList\n      });\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  retryUploadFile = (resumableFile) => {\n    let { repoID, path } = this.props;\n    let fileName = resumableFile.fileName;\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (!isFile) {\n      let relative_path = resumableFile.formData.relative_path;\n      let prefix = path === '/' ? (path + relative_path) : (path + '/' + relative_path);\n      fileName = prefix + fileName;\n    }\n\n    resumableFile.bootstrap();\n    var firedRetry = false;\n    resumableFile.resumableObj.on('chunkingComplete', () => {\n      if(!firedRetry) {\n        seafileAPI.getFileUploadedBytes(repoID, path, fileName).then(res => {\n          let uploadedBytes = res.data.uploadedBytes;\n          let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n          let offset = Math.floor(uploadedBytes / blockSize);\n          resumableFile.markChunksCompleted(offset);\n\n          resumableFile.resumableObj.upload();\n\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n      firedRetry = true;\n    });\n\n  }\n\n  replaceRepetitionFile = () => {\n    let { repoID, path } = this.props;\n    seafileAPI.getUpdateLink(repoID, path).then(res => {\n      this.resumable.opts.target = res.data;\n\n      let resumableFile = this.resumable.files[this.resumable.files.length - 1];\n      resumableFile.formData['replace'] = 1;\n      resumableFile.formData['target_file'] = resumableFile.formData.parent_dir + resumableFile.fileName;\n      this.setUploadFileList(this.resumable.files);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  cancelFileUpload = () => {\n    this.resumable.files.pop(); //delete latest file；\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"file-uploader-container\">\n          <div className=\"file-uploader\">\n            <input className=\"upload-input\" type=\"file\" ref={this.uploadInput} onClick={this.onClick} />\n          </div>\n        </div>\n        <UploadProgressDialog\n          retryFileList={this.state.retryFileList}\n          uploadFileList={this.state.uploadFileList}\n          forbidUploadFileList={this.state.forbidUploadFileList}\n          totalProgress={this.state.totalProgress}\n          uploadBitrate={this.state.uploadBitrate}\n          allFilesUploaded={this.state.allFilesUploaded}\n          onCloseUploadDialog={this.onCloseUploadDialog}\n          onCancelAllUploading={this.onCancelAllUploading}\n          onUploadCancel={this.onUploadCancel}\n          onUploadRetry={this.onUploadRetry}\n          onFileUpload={this.onFileUpload}\n          onFolderUpload={this.onFolderUpload}\n        />\n      </Fragment>\n    );\n  }\n}\n\nFileUploader.propTypes = propTypes;\n\nexport default FileUploader;\n","import React, { Fragment } from 'react';\nimport ReactDom from 'react-dom';\nimport { Utils } from '../../utils/utils';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { gettext } from '../../utils/constants';\nimport Logo from '../../components/logo';\nimport Account from '../../components/common/account';\nimport FileUploader from './file-uploader';\n\nimport '../../css/upload-link.css';\n\nconst loggedUser = window.app.pageOptions.username;\nconst {\n  dirName,\n  sharedBy,\n  noQuota,\n  maxUploadFileSize,\n  token,\n  repoID,\n  path\n} = window.uploadLink;\n\n\nclass SharedUploadLink extends React.Component {\n\n  onFileUploadSuccess = (direntObject) => {\n    const { name, size } = direntObject;\n    seafileAPI.shareLinksUploadDone(token, Utils.joinPath(path, name));\n  }\n\n  render() {\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <div className=\"top-header d-flex justify-content-between\">\n          <Logo />\n          {loggedUser && <Account />}\n        </div>\n        <div className=\"o-auto\">\n          <div className=\"py-4 px-6 mx-auto rounded\" id=\"upload-link-panel\">\n            <h3 className=\"h5\" dangerouslySetInnerHTML={{__html: gettext('Upload files to {folder_name_placeholder}')\n              .replace('{folder_name_placeholder}', `<span class=\"op-target\">${Utils.HTMLescape(dirName)}</span>`)}}></h3>\n            <p className=\"small shared-by\" dangerouslySetInnerHTML={{__html: `${gettext('shared by:')} ${sharedBy.avatar} ${sharedBy.name}`}}></p>\n            {noQuota ? (\n              <div className=\"py-6 text-center\">\n                <span className=\"sf3-font sf3-font-tips warning-icon\"></span>\n                <p>{gettext('The owner of this library has run out of space.')}</p>\n              </div>\n            ) : (\n              <Fragment>\n                <ol className=\"small text-gray\">\n                  <li className=\"tip-list-item\">{gettext('Folder upload is limited to Chrome, Firefox 50+, and Microsoft Edge.')}</li>\n                  {maxUploadFileSize && <li className=\"tip-list-item\">{gettext('File size should be smaller than {max_size_placeholder}.').replace('{max_size_placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000))}</li>}\n                </ol>\n                <div id=\"upload-link-drop-zone\" className=\"text-center mt-2 mb-4\">\n                  <span className=\"sf3-font sf3-font-upload upload-icon\"></span>\n                  <p className=\"small text-gray mb-0\">{gettext('Drag and drop files or folders here.')}</p>\n                </div>\n                <FileUploader\n                  ref={uploader => this.uploader = uploader}\n                  dragAndDrop={true}\n                  token={token}\n                  repoID={repoID}\n                  path={path}\n                  onFileUploadSuccess={this.onFileUploadSuccess}\n                />\n              </Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDom.render(<SharedUploadLink />, document.getElementById('wrapper'));\n"],"sourceRoot":""}